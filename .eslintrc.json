{
  "extends": [
    "next/core-web-vitals",
    "prettier",
    "airbnb",
    "airbnb-typescript",
    "airbnb/hooks",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "next/core-web-vitals"
  ],
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    "ecmaVersion": 2021,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "react-hooks",
    "react-refresh",
    "no-relative-import-paths"
  ],
  "rules": {
    "react-refresh/only-export-components": "warn",
    "react/jsx-filename-extension": [1, { "extensions": [".ts", ".tsx"] }],
    "react/react-in-jsx-scope": "off",
    "prettier/prettier": ["error"],
    "import/prefer-default-export": 0,
    "import/extensions": 0,
    "import/no-unresolved": 0,
    //변수 선언식에서 객체에 대해서만 구조 분해 할당 규칙을 강제
    "prefer-destructuring": [
      "error",
      {
        "VariableDeclarator": {
          "array": false,
          "object": true
        },
        "AssignmentExpression": {
          "array": false,
          "object": false
        }
      }
    ],
    // 같은 폴더인 경우를 제외하고 import 경로는 항상 절대 경로를 사용
    "no-relative-import-paths/no-relative-import-paths": [
      "warn",
      { "allowSameFolder": true, "rootDir": "src", "prefix": "@" }
    ],
    "@typescript-eslint/naming-convention": [
      "warn",
      // camelCase 변수, PascalCase 변수, UPPER_CASE 변수 허용
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      // camelCase 함수, PascalCase 함수 허용
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      },
      // PascalCase 클래스, interfaces, type aliases, enums 허용
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      // interface 앞에 I 사용 불가
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      },
      // typeAlias 앞에 T 사용 불가
      {
        "selector": "typeAlias",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^T[A-Z]",
          "match": false
        }
      },
      // typeParameter 앞에 T 사용 불가
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^T[A-Z]",
          "match": false
        }
      }
    ]
  }
}
